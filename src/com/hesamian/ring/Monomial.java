package com.hesamian.ring;

import java.math.BigInteger;
import java.util.Map;

/**
 * This class handles Monomials. Monomials have a variable name, coefficient and
 * exponent. Note that coefficient and exponent are BigIntegers as we are
 * dealing with BigInteger Rings. Monomials can be in constant form. For
 * example: 1x^0 + constant.
 * 
 * @author Seyedamirhossein Hesamian
 * @since 08/30/2016
 */

public class Monomial implements Comparable<Monomial> {
    private BigInteger coefficient = null;
    private BigInteger exponent = null;
    private BigInteger constant = null;
    private String name = null;

    /**
     * This is a basic constructor that initializes Monomial. Monomial contains:
     * coefficient<BigInteger>, exponent<BigInteger> and variable name<String>.
     * 
     * @param Coefficient
     *            (BigInteger)
     * @param Exponent
     *            (BigInteger)
     * @param Variable
     *            name (String)
     * @return None
     */
    public Monomial(BigInteger coefficient, BigInteger exponent, String name) {
        super();
        this.coefficient = coefficient;
        this.exponent = exponent;
        this.name = name;
    }

    /**
     * This is constructor initializes special type of Monomial. Let's call it
     * constant Monomial. It is essentially a Monomial that does not have a
     * variable name, with exponent value of zero and coefficient value of 1.
     * 
     * @param Constant
     *            value (BigInteger)
     * @return None
     */
    public Monomial(BigInteger constant) {
        super();
        this.constant = constant;
        this.name = "";
        this.coefficient = BigInteger.ONE;
        this.exponent = BigInteger.ZERO;
    }

    /**
     * This is method evaluated a Monomial by brining a respective variable
     * value to the exponent and then multiplying it with coefficient value.
     * This method uses a Map<String, BigInteger> to evaluate a Monomials. If
     * Monomial is constant then method just returns a constant value and no
     * evaluation is done.
     * 
     * @param Map
     *            <String, BigInteger>
     * @return BigInteger
     */
    public BigInteger evaluate(Map<String, BigInteger> map) {
        if (constant == null) {
            return coefficient.multiply(map.get(name).pow(exponent.intValue()));
        } else {
            return constant;
        }
    }

    /**
     * Overridden hashCode method auto generated by eclipse IDE.
     * 
     * @param None
     * @return Hash value
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((coefficient == null) ? 0 : coefficient.hashCode());
        result = prime * result + ((constant == null) ? 0 : constant.hashCode());
        result = prime * result + ((exponent == null) ? 0 : exponent.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    /**
     * Overridden equals method auto generated by eclipse IDE.
     * 
     * @param Monomial
     *            object
     * @return Boolean equality
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Monomial other = (Monomial) obj;
        if (coefficient == null) {
            if (other.coefficient != null)
                return false;
        } else if (!coefficient.equals(other.coefficient))
            return false;
        if (constant == null) {
            if (other.constant != null)
                return false;
        } else if (!constant.equals(other.constant))
            return false;
        if (exponent == null) {
            if (other.exponent != null)
                return false;
        } else if (!exponent.equals(other.exponent))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    /**
     * Overridden toString method auto generated by eclipse IDE.
     * 
     * @param None
     * @return String representation value
     */
    @Override
    public String toString() {
        if (constant == null) {
            return coefficient + name + "^" + exponent;
        } else {
            return constant.toString();
        }
    }

    /**
     * This method compares two Monomials based on their exponent value (or
     * degree).
     * 
     * @param Another
     *            monomial
     * @return -1, 0, +1
     */
    public int compareTo(Monomial monomial) {
        return exponent.compareTo(monomial.exponent);
    }

    /**
     * @return the coefficient
     */
    public BigInteger getCoefficient() {
        return coefficient;
    }

    /**
     * @return the exponent
     */
    public BigInteger getExponent() {
        return exponent;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * This method converts a String representation of Monomial to a Monomial
     * object using regular expression. For example: 2x^3 -> coefficient:2,
     * exponent:3, variable name: x.
     * 
     * @param String
     *            representation of Monomial
     * @return Monomial object
     */
    public static Monomial getMonomial(String str) {
        BigInteger _coefficient;
        BigInteger _exponent = null;
        String _name = null;

        if (str.matches("([0-9]*[a-zA-z]*\\^[0-9]*)+|([0-9]*[a-zA-Z]*)|([0-9]*)")) {
            if (Utility.indexOf("[a-zA-Z]+", str) < 0) {
                if (str.indexOf("^") < 0) {
                    return new Monomial(new BigInteger(str));
                } else if (str.indexOf("^") > -1) {
                    if (str.indexOf("^") != str.lastIndexOf("^")) {
                        String _temp = null;
                        while (Utility.characterCount('^', str) > 1) {
                            int _index = str.indexOf("^");
                            _temp = str.substring(0, _index) + "^" + Integer.parseInt(str.substring(_index + 1, str.indexOf("^", _index + 1)));
                            str = str.replace(_temp, new BigInteger(str.substring(0, _index)).pow(Integer.parseInt(str.substring(_index + 1, str.indexOf("^", _index + 1)))).toString());
                        }
                        return getMonomial(str);
                    } else {
                        return new Monomial(new BigInteger(str.substring(0, str.indexOf("^"))).pow(Integer.parseInt(str.substring(str.indexOf("^") + 1))));
                    }
                } else {
                    System.out.println("Given string to getMonomial() method is corrupt.");
                    return null;
                }
            } else {
                if (str.substring(0, Utility.indexOf("[a-zA-Z]+", str)).isEmpty()) {
                    _coefficient = BigInteger.ONE;
                } else {
                    _coefficient = new BigInteger(str.substring(0, Utility.indexOf("[a-zA-Z]+", str)));
                }

                if (str.indexOf("^") < 0) {
                    _name = str.substring(Utility.indexOf("[a-zA-Z]+", str), str.length());
                    _exponent = BigInteger.ONE;
                } else {
                    _name = str.substring(Utility.indexOf("[a-zA-Z]+", str), str.indexOf("^"));
                    _exponent = new BigInteger(str.substring(str.indexOf("^") + 1, str.length()));
                }

                return new Monomial(_coefficient, _exponent, _name);
            }
        } else {
            System.out.println("Given string to getMonomial() method is corrupt.");
            return null;
        }
    }
}
